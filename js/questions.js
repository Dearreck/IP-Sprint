// js/questions.js
// ==================================================
// Módulo Generador de Preguntas para IP Sprint
// ==================================================

// --- Importaciones ---
import {
    getRandomInt, generateRandomIp, generateRandomPrivateIp, getIpInfo, shuffleArray,
    generateClassRangeTableHTML, generateClassMaskTableHTML, generatePrivateRangeTableHTML,
    getIpPortions, generatePortionExplanationHTML, generateSpecialAddressExplanationHTML,
    calculateNetworkAddress, calculateBroadcastAddress // Importar NUEVAS utilidades de cálculo
} from './utils.js';

// --- Generadores de Preguntas (Nivel Entry) ---
// (Funciones sin cambios)
function generateClassQuestion() { try { const ip = generateRandomIp(); const info = getIpInfo(ip); if (info.class === 'N/A') return generateClassQuestion(); const question = `Dada la IP: <strong>${ip}</strong><br>¿A qué clase pertenece?`; const options = ['A', 'B', 'C', 'D', 'E']; const correct = info.class; const explanation = generateClassRangeTableHTML(correct); return { question, options, correctAnswer: correct, explanation }; } catch (error) { console.error("Error en generateClassQuestion:", error); return null; } }
function generateTypeQuestion() { try { let ip, info, attempts = 0; let forcePrivate = Math.random() < 0.4; ip = forcePrivate ? generateRandomPrivateIp() : generateRandomIp(); info = getIpInfo(ip); while ((info.type === 'N/A' || info.type === 'Loopback' || info.type === 'APIPA' || info.type === 'Broadcast Limitado') && attempts < 50) { ip = generateRandomIp(); info = getIpInfo(ip); attempts++; } if (info.type !== 'Pública' && info.type !== 'Privada') { ip = '8.8.8.8'; info = getIpInfo(ip); } const question = `Dada la IP: <strong>${ip}</strong><br>¿Es Pública o Privada?`; const options = ['Pública', 'Privada']; const correct = info.type; const explanation = generatePrivateRangeTableHTML(ip); return { question, options, correctAnswer: correct, explanation }; } catch (error) { console.error("Error en generateTypeQuestion:", error); return null; } }
function generateDefaultMaskQuestion() { try { let ip, info, attempts = 0; do { ip = generateRandomIp(); info = getIpInfo(ip); attempts++; } while ((info.class !== 'A' && info.class !== 'B' && info.class !== 'C' || info.type === 'Loopback') && attempts < 100); if (attempts >= 100) { ip = '192.168.1.1'; info = getIpInfo(ip); } const question = `Dada la IP: <strong>${ip}</strong> (Clase ${info.class})<br>¿Cuál es su máscara de subred por defecto?`; const options = ['255.0.0.0', '255.255.0.0', '255.255.255.0']; const correct = info.defaultMask; const explanation = generateClassMaskTableHTML(info.class); const finalCorrectAnswer = options.includes(correct) ? correct : options[0]; return { question, options, correctAnswer: finalCorrectAnswer, explanation }; } catch (error) { console.error("Error en generateDefaultMaskQuestion:", error); return null; } }
function generateSelectClassQuestion() { try{ const targetClasses = ['A', 'B', 'C']; const targetClass = targetClasses[getRandomInt(0, targetClasses.length - 1)]; const question = `¿Cuál de las siguientes IPs pertenece a la Clase <strong>${targetClass}</strong>?`; let correctIp = ''; let incorrectIps = []; let attempts = 0; let ipSet = new Set(); while (!correctIp && attempts < 100) { let ip = generateRandomIp(); let info = getIpInfo(ip); if (info.class === targetClass && info.type !== 'Loopback') { correctIp = ip; ipSet.add(ip); } attempts++; } if (!correctIp) { if(targetClass === 'A') correctIp = '10.1.1.1'; else if(targetClass === 'B') correctIp = '172.16.1.1'; else correctIp = '192.168.1.1'; ipSet.add(correctIp); } attempts = 0; while (incorrectIps.length < 3 && attempts < 300) { let ip = generateRandomIp(); let info = getIpInfo(ip); if (info.class !== targetClass && info.class !== 'N/A' && info.type !== 'Loopback' && !ipSet.has(ip)) { incorrectIps.push(ip); ipSet.add(ip); } attempts++; } if(incorrectIps.length < 3) { const fallbacks = ['8.8.8.8', '224.0.0.5', '169.254.1.1', '150.150.1.1', '200.200.1.1', '126.1.1.1', '191.1.1.1']; for (const fb of fallbacks) { if (incorrectIps.length < 3 && !ipSet.has(fb) && getIpInfo(fb).class !== targetClass) { incorrectIps.push(fb); ipSet.add(fb); } } } incorrectIps = incorrectIps.slice(0, 3); const options = [correctIp, ...incorrectIps]; shuffleArray(options); const correct = correctIp; const explanation = `Se busca una IP de Clase ${targetClass}. La correcta es ${correct}.<br>${generateClassRangeTableHTML(targetClass)}`; return { question, options, correctAnswer: correct, explanation }; } catch (error) { console.error("Error en generateSelectClassQuestion:", error); return null; } }
function generateSelectPrivateIpQuestion() { try { const question = `¿Cuál de las siguientes direcciones IP es <strong>Privada</strong>?`; let correctIp = generateRandomPrivateIp(); let incorrectIps = []; let attempts = 0; let ipSet = new Set([correctIp]); while (incorrectIps.length < 3 && attempts < 300) { let ip = generateRandomIp(); let info = getIpInfo(ip); if (info.type === 'Pública' && !ipSet.has(ip)) { incorrectIps.push(ip); ipSet.add(ip); } attempts++; } if(incorrectIps.length < 3) { const fallbacks = ['8.8.8.8', '1.1.1.1', '203.0.113.1', '198.51.100.1', '172.15.1.1', '192.169.1.1']; for (const fb of fallbacks) { if (incorrectIps.length < 3 && !ipSet.has(fb)) { incorrectIps.push(fb); ipSet.add(fb); } } } incorrectIps = incorrectIps.slice(0, 3); const options = [correctIp, ...incorrectIps]; shuffleArray(options); const correct = correctIp; const explanation = generatePrivateRangeTableHTML(correct); return { question, options, correctAnswer: correct, explanation }; } catch (error) { console.error("Error en generateSelectPrivateIpQuestion:", error); return null; } }
function generateSelectIpByDefaultMaskQuestion() { try { const targetMasks = ['255.0.0.0', '255.255.0.0', '255.255.255.0']; const targetMask = targetMasks[getRandomInt(0, targetMasks.length - 1)]; const question = `¿Cuál de las siguientes IPs usaría la máscara por defecto <strong>${targetMask}</strong>?`; let correctIp = ''; let incorrectIps = []; let attempts = 0; let ipSet = new Set(); while (!correctIp && attempts < 100) { let ip = generateRandomIp(); let info = getIpInfo(ip); if (info.defaultMask === targetMask && info.type !== 'Loopback') { correctIp = ip; ipSet.add(ip); } attempts++; } if (!correctIp) { if(targetMask === '255.0.0.0') correctIp = '10.1.1.1'; else if(targetMask === '255.255.0.0') correctIp = '172.16.1.1'; else correctIp = '192.168.1.1'; ipSet.add(correctIp); } attempts = 0; while (incorrectIps.length < 3 && attempts < 300) { let ip = generateRandomIp(); let info = getIpInfo(ip); if (info.defaultMask !== 'N/A' && info.defaultMask !== targetMask && info.type !== 'Loopback' && !ipSet.has(ip)) { incorrectIps.push(ip); ipSet.add(ip); } attempts++; } if(incorrectIps.length < 3) { const fallbacks = ['8.8.8.8', '224.0.0.1', '169.254.1.1', '172.30.1.1', '192.168.5.5', '126.1.1.1', '191.1.1.1']; for (const fb of fallbacks) { let fbInfo = getIpInfo(fb); if (incorrectIps.length < 3 && !ipSet.has(fb) && fbInfo.defaultMask !== targetMask && fbInfo.defaultMask !== 'N/A') { incorrectIps.push(fb); ipSet.add(fb); } } } incorrectIps = incorrectIps.slice(0, 3); const options = [correctIp, ...incorrectIps]; shuffleArray(options); const correct = correctIp; const correctClass = getIpInfo(correct).class; const explanation = `Se busca una IP cuya clase (${correctClass}) tenga la máscara por defecto ${targetMask}.<br>${generateClassMaskTableHTML(correctClass)}`; return { question, options, correctAnswer: correct, explanation }; } catch (error) { console.error("Error en generateSelectIpByDefaultMaskQuestion:", error); return null; } }

// --- Generadores de Preguntas (Nivel Associate) ---

/** Genera pregunta: Clase y Tipo */
function generateClassAndTypeQuestion() { try { let ip, info, attempts = 0; do { ip = generateRandomIp(); info = getIpInfo(ip); attempts++; } while ((info.class !== 'A' && info.class !== 'B' && info.class !== 'C' || info.type === 'Loopback') && attempts < 100); if (attempts >= 100) { ip = Math.random() < 0.5 ? '172.20.1.1' : '10.10.10.10'; info = getIpInfo(ip); } const question = `Dada la IP: <strong>${ip}</strong><br>¿Cuál es su Clase y Tipo?`; const correctClass = info.class; const correctType = info.type; const correctAnswerText = `Clase ${correctClass}, ${correctType}`; let options = new Set([correctAnswerText]); const possibleClasses = ['A', 'B', 'C'].filter(c => c !== correctClass); const possibleTypes = ['Pública', 'Privada'].filter(t => t !== correctType); if (possibleTypes.length > 0) { options.add(`Clase ${correctClass}, ${possibleTypes[0]}`); } if (possibleClasses.length > 0) { options.add(`Clase ${possibleClasses[0]}, ${correctType}`); } if (possibleClasses.length > 0 && possibleTypes.length > 0) { options.add(`Clase ${possibleClasses[0]}, ${possibleTypes[0]}`); } while (options.size < 4) { const randomClass = ['A', 'B', 'C'][getRandomInt(0, 2)]; const randomType = ['Pública', 'Privada'][getRandomInt(0, 1)]; const potentialOption = `Clase ${randomClass}, ${randomType}`; if (potentialOption !== correctAnswerText) { options.add(potentialOption); } } let optionsArray = Array.from(options); if (!optionsArray.includes(correctAnswerText)) { optionsArray.pop(); optionsArray.push(correctAnswerText); } optionsArray = optionsArray.slice(0, 4); shuffleArray(optionsArray); const explanation = `${generateClassRangeTableHTML(correctClass)}<hr style="margin: 10px 0;">${generatePrivateRangeTableHTML(ip)}`; return { question, options: optionsArray, correctAnswer: correctAnswerText, explanation }; } catch (error) { console.error("Error en generateClassAndTypeQuestion:", error); return null; } }

/** Genera pregunta: Clase y Máscara por Defecto */
function generateClassAndDefaultMaskQuestion() { try { let ip, info, attempts = 0; do { ip = generateRandomIp(); info = getIpInfo(ip); attempts++; } while ((info.class !== 'A' && info.class !== 'B' && info.class !== 'C' || info.type === 'Loopback') && attempts < 100); if (attempts >= 100) { ip = '172.16.50.50'; info = getIpInfo(ip); } const question = `Dada la IP: <strong>${ip}</strong><br>¿Cuál es su Clase y Máscara por Defecto?`; const correctClass = info.class; const correctMask = info.defaultMask; const correctAnswerText = `Clase ${correctClass}, Máscara ${correctMask}`; let options = new Set([correctAnswerText]); const possibleClasses = ['A', 'B', 'C'].filter(c => c !== correctClass); const possibleMasks = ['255.0.0.0', '255.255.0.0', '255.255.255.0'].filter(m => m !== correctMask); if (possibleMasks.length > 0) { options.add(`Clase ${correctClass}, Máscara ${possibleMasks[0]}`); } if (possibleClasses.length > 0) { options.add(`Clase ${possibleClasses[0]}, Máscara ${correctMask}`); } if (possibleClasses.length > 0) { let incorrectMaskForIncorrectClass = '255.255.255.255'; if (possibleClasses[0] === 'A' && possibleMasks.includes('255.0.0.0')) incorrectMaskForIncorrectClass = '255.0.0.0'; else if (possibleClasses[0] === 'B' && possibleMasks.includes('255.255.0.0')) incorrectMaskForIncorrectClass = '255.255.0.0'; else if (possibleClasses[0] === 'C' && possibleMasks.includes('255.255.255.0')) incorrectMaskForIncorrectClass = '255.255.255.0'; else if (possibleMasks.length > 0) incorrectMaskForIncorrectClass = possibleMasks[0]; const incorrectCombination = `Clase ${possibleClasses[0]}, Máscara ${incorrectMaskForIncorrectClass}`; if (!options.has(incorrectCombination)) { options.add(incorrectCombination); } } while (options.size < 4) { const randomClass = ['A', 'B', 'C'][getRandomInt(0, 2)]; const randomMask = ['255.0.0.0', '255.255.0.0', '255.255.255.0'][getRandomInt(0, 2)]; const potentialOption = `Clase ${randomClass}, Máscara ${randomMask}`; if (potentialOption !== correctAnswerText) { options.add(potentialOption); } } let optionsArray = Array.from(options); if (!optionsArray.includes(correctAnswerText)) { optionsArray.pop(); optionsArray.push(correctAnswerText); } optionsArray = optionsArray.slice(0, 4); shuffleArray(optionsArray); const explanation = generateClassMaskTableHTML(correctClass); return { question, options: optionsArray, correctAnswer: correctAnswerText, explanation }; } catch (error) { console.error("Error en generateClassAndDefaultMaskQuestion:", error); return null; } }

/** Genera pregunta: Clase y Porción de Red (con máscara default) */
function generateClassAndNetworkPortionQuestion() { try { let ip, info, portions, attempts = 0; do { ip = generateRandomIp(); info = getIpInfo(ip); if (info.class === 'A' || info.class === 'B' || info.class === 'C') { portions = getIpPortions(ip, info.defaultMask); } else { portions = null; } attempts++; } while (!portions && attempts < 100); if (!portions) { ip = '192.168.1.100'; info = getIpInfo(ip); portions = getIpPortions(ip, info.defaultMask); if (!portions) throw new Error("Fallback IP falló"); } const question = `Dada la IP: <strong>${ip}</strong><br>¿Cuál es su Clase y Porción de Red (usando máscara default)?`; const correctClass = info.class; const correctNetworkPortion = portions.networkPortion; if (!correctNetworkPortion && correctNetworkPortion !== "") throw new Error(`No se pudo obtener networkPortion para ${ip}`); const correctAnswerText = `Clase ${correctClass}, Red ${correctNetworkPortion || 'Ninguna'}`; let options = new Set([correctAnswerText]); const possibleClasses = ['A', 'B', 'C'].filter(c => c !== correctClass); let randomIpForPortion, randomInfoForPortion, incorrectNetworkPortion = null, portionAttempts = 0; do { randomIpForPortion = generateRandomIp(); randomInfoForPortion = getIpInfo(randomIpForPortion); if (randomInfoForPortion.defaultMask !== 'N/A') { incorrectNetworkPortion = getIpPortions(randomIpForPortion, randomInfoForPortion.defaultMask)?.networkPortion; } portionAttempts++; } while ((!incorrectNetworkPortion || incorrectNetworkPortion === correctNetworkPortion) && portionAttempts < 50); if (incorrectNetworkPortion && incorrectNetworkPortion !== correctNetworkPortion) { options.add(`Clase ${correctClass}, Red ${incorrectNetworkPortion}`); } else { if (correctClass !== 'A') options.add(`Clase ${correctClass}, Red ${getRandomInt(1,126)}`); else options.add(`Clase ${correctClass}, Red ${getRandomInt(128,191)}.${getRandomInt(0,255)}`); } if (possibleClasses.length > 0) { options.add(`Clase ${possibleClasses[0]}, Red ${correctNetworkPortion || 'Ninguna'}`); } if (possibleClasses.length > 0 && incorrectNetworkPortion && incorrectNetworkPortion !== correctNetworkPortion) { options.add(`Clase ${possibleClasses[0]}, Red ${incorrectNetworkPortion}`); } while (options.size < 4) { const randomClass = ['A', 'B', 'C'][getRandomInt(0, 2)]; let randomPortion = ''; if (randomClass === 'A') randomPortion = `${getRandomInt(1, 126)}`; else if (randomClass === 'B') randomPortion = `${getRandomInt(128, 191)}.${getRandomInt(0, 255)}`; else randomPortion = `${getRandomInt(192, 223)}.${getRandomInt(0, 255)}.${getRandomInt(0, 255)}`; const potentialOption = `Clase ${randomClass}, Red ${randomPortion}`; if (potentialOption !== correctAnswerText) { options.add(potentialOption); } } let optionsArray = Array.from(options); if (!optionsArray.includes(correctAnswerText)) { optionsArray.pop(); optionsArray.push(correctAnswerText); } optionsArray = optionsArray.slice(0, 4); shuffleArray(optionsArray); const explanation = generatePortionExplanationHTML(ip, info.defaultMask, correctClass, correctNetworkPortion, portions.hostPortion); return { question, options: optionsArray, correctAnswer: correctAnswerText, explanation }; } catch (error) { console.error("Error en generateClassAndNetworkPortionQuestion:", error); return null; } }

/** Genera pregunta: Clase y Porción de Host (con máscara default) */
function generateClassAndHostPortionQuestion() { try { let ip, info, portions, attempts = 0; do { ip = generateRandomIp(); info = getIpInfo(ip); if (info.class === 'A' || info.class === 'B' || info.class === 'C') { portions = getIpPortions(ip, info.defaultMask); } else { portions = null; } attempts++; } while (!portions && attempts < 100); if (!portions) { ip = '172.16.10.20'; info = getIpInfo(ip); portions = getIpPortions(ip, info.defaultMask); if (!portions) throw new Error("Fallback IP falló"); } const question = `Dada la IP: <strong>${ip}</strong><br>¿Cuál es su Clase y Porción de Host (usando máscara default)?`; const correctClass = info.class; const correctHostPortion = portions.hostPortion; if (!correctHostPortion && correctHostPortion !== "") throw new Error(`No se pudo obtener hostPortion para ${ip}`); const correctAnswerText = `Clase ${correctClass}, Host ${correctHostPortion || 'Ninguna'}`; let options = new Set([correctAnswerText]); const possibleClasses = ['A', 'B', 'C'].filter(c => c !== correctClass); let randomIpForPortion, randomInfoForPortion, incorrectHostPortion = null, portionAttempts = 0; do { randomIpForPortion = generateRandomIp(); randomInfoForPortion = getIpInfo(randomIpForPortion); if (randomInfoForPortion.defaultMask !== 'N/A') { incorrectHostPortion = getIpPortions(randomIpForPortion, randomInfoForPortion.defaultMask)?.hostPortion; } portionAttempts++; } while ((!incorrectHostPortion || incorrectHostPortion === correctHostPortion) && portionAttempts < 50); if (incorrectHostPortion && incorrectHostPortion !== correctHostPortion) { options.add(`Clase ${correctClass}, Host ${incorrectHostPortion}`); } else { if (correctClass !== 'C') options.add(`Clase ${correctClass}, Host ${getRandomInt(1,254)}`); else options.add(`Clase ${correctClass}, Host ${getRandomInt(0,255)}.${getRandomInt(1,254)}`); } if (possibleClasses.length > 0) { options.add(`Clase ${possibleClasses[0]}, Host ${correctHostPortion || 'Ninguna'}`); } if (possibleClasses.length > 0 && incorrectHostPortion && incorrectHostPortion !== correctHostPortion) { options.add(`Clase ${possibleClasses[0]}, Host ${incorrectHostPortion}`); } while (options.size < 4) { const randomClass = ['A', 'B', 'C'][getRandomInt(0, 2)]; let randomPortion = ''; if (randomClass === 'A') randomPortion = `${getRandomInt(0, 255)}.${getRandomInt(0, 255)}.${getRandomInt(1, 254)}`; else if (randomClass === 'B') randomPortion = `${getRandomInt(0, 255)}.${getRandomInt(1, 254)}`; else randomPortion = `${getRandomInt(1, 254)}`; const potentialOption = `Clase ${randomClass}, Host ${randomPortion}`; if (potentialOption !== correctAnswerText) { options.add(potentialOption); } } let optionsArray = Array.from(options); if (!optionsArray.includes(correctAnswerText)) { optionsArray.pop(); optionsArray.push(correctAnswerText); } optionsArray = optionsArray.slice(0, 4); shuffleArray(optionsArray); const explanation = generatePortionExplanationHTML(ip, info.defaultMask, correctClass, portions.networkPortion, correctHostPortion); return { question, options: optionsArray, correctAnswer: correctAnswerText, explanation }; } catch (error) { console.error("Error en generateClassAndHostPortionQuestion:", error); return null; } }

/** Genera preguntas sobre los bloques privados RFC 1918 (CIDR, Rango, Clase) */
function generateRfc1918Question() { try { const rfcLink = 'https://datatracker.ietf.org/doc/html/rfc1918'; const rfc1918Blocks = [ { cidr: '/8', range: '10.0.0.0 - 10.255.255.255', blockStart: '10.0.0.0', class: 'A', blockId: '10.0.0.0/8' }, { cidr: '/12', range: '172.16.0.0 - 172.31.255.255', blockStart: '172.16.0.0', class: 'B', blockId: '172.16.0.0/12' }, { cidr: '/16', range: '192.168.0.0 - 192.168.255.255', blockStart: '192.168.0.0', class: 'C', blockId: '192.168.0.0/16' } ]; const otherCidrs = ['/10', '/20', '/24', '/28']; const possibleClasses = ['A', 'B', 'C']; const chosenBlock = rfc1918Blocks[getRandomInt(0, rfc1918Blocks.length - 1)]; let question = ''; let correctAnswer = ''; let options = []; let explanation = ''; const questionType = getRandomInt(0, 2); const rfcLinkHTML = `<a href="${rfcLink}" target="_blank" rel="noopener noreferrer">RFC 1918</a>`; if (questionType === 0) { question = `Según ${rfcLinkHTML}, ¿qué notación CIDR corresponde al bloque privado que comienza en <strong>${chosenBlock.blockStart}</strong>?`; correctAnswer = chosenBlock.cidr; options = [correctAnswer]; let incorrectOptions = otherCidrs.filter(c => c !== correctAnswer); shuffleArray(incorrectOptions); options.push(...incorrectOptions.slice(0, 3)); } else if (questionType === 1) { question = `Según ${rfcLinkHTML}, ¿qué rango de direcciones corresponde al bloque privado definido como <strong>${chosenBlock.cidr}</strong>?`; correctAnswer = chosenBlock.range; options = [correctAnswer]; let incorrectOptions = rfc1918Blocks.filter(b => b.cidr !== chosenBlock.cidr).map(b => b.range); if (incorrectOptions.length < 3) { incorrectOptions.push('8.8.0.0 - 8.8.255.255'); } options.push(...incorrectOptions.slice(0, 3)); } else { const blockIdentifier = chosenBlock.blockId; question = `El bloque privado ${rfcLinkHTML} <strong>${blockIdentifier}</strong> utiliza direcciones que originalmente pertenecen a la Clase:`; correctAnswer = chosenBlock.class; options = [correctAnswer]; let incorrectOptions = possibleClasses.filter(c => c !== correctAnswer); options.push(...incorrectOptions); } shuffleArray(options); if (options.length > 4) options = options.slice(0, 4); if (!options.includes(correctAnswer)) { options.pop(); options.push(correctAnswer); shuffleArray(options); } explanation = generatePrivateRangeTableHTML(chosenBlock.blockStart); if (questionType === 2) { explanation += `<p style="font-size:0.9em; text-align:center; margin-top:5px;">Aunque el bloque <strong>${chosenBlock.blockId}</strong> es classless, las direcciones IP dentro de él caen en el rango original de la <strong>Clase ${chosenBlock.class}</strong>.</p>`; } return { question, options, correctAnswer, explanation }; } catch (error) { console.error("Error en generateRfc1918Question:", error); return null; } }

/** Genera preguntas sobre direcciones IP especiales (Loopback, APIPA, Broadcast Limitado) */
function generateSpecialAddressQuestion() { try { const specialAddresses = [ { ip: '127.0.0.1', type: 'Loopback', description: 'Dirección de Loopback' }, { ip: `169.254.${getRandomInt(1, 254)}.${getRandomInt(1, 254)}`, type: 'APIPA', description: 'Dirección APIPA (Link-Local)' }, { ip: '255.255.255.255', type: 'Broadcast Limitado', description: 'Broadcast Limitado' } ]; const normalIpTypes = ['Pública', 'Privada']; const pickSpecial = Math.random() < 0.6; let targetIp = ''; let correctAnswer = ''; let questionFormat = getRandomInt(0, 1); if (pickSpecial) { const chosenSpecial = specialAddresses[getRandomInt(0, specialAddresses.length - 1)]; targetIp = chosenSpecial.ip; correctAnswer = chosenSpecial.description; if (questionFormat === 0) { const question = `La dirección IP <strong>${targetIp}</strong> es una dirección de tipo:`; let options = [correctAnswer]; let incorrectOptions = specialAddresses.filter(s => s.type !== chosenSpecial.type).map(s => s.description); incorrectOptions.push(...normalIpTypes); shuffleArray(incorrectOptions); options.push(...incorrectOptions.slice(0, 3)); shuffleArray(options); if (options.length > 4) options = options.slice(0, 4); if (!options.includes(correctAnswer)) { options.pop(); options.push(correctAnswer); shuffleArray(options); } const explanation = generateSpecialAddressExplanationHTML(chosenSpecial.type); return { question, options, correctAnswer, explanation }; } else { const question = `¿Cuál de las siguientes es una dirección de <strong>${correctAnswer}</strong>?`; let options = [targetIp]; let incorrectIps = new Set(); while (incorrectIps.size < 2) { let ip = generateRandomIp(); if (getIpInfo(ip).type !== 'Loopback' && getIpInfo(ip).type !== 'APIPA') { incorrectIps.add(ip); } } let otherSpecial = specialAddresses.find(s => s.type !== chosenSpecial.type); if (otherSpecial) { incorrectIps.add(otherSpecial.ip); } else { while (incorrectIps.size < 3) { let ip = generateRandomIp(); if (getIpInfo(ip).type !== 'Loopback' && getIpInfo(ip).type !== 'APIPA') { incorrectIps.add(ip); } } } options.push(...Array.from(incorrectIps).slice(0, 3)); shuffleArray(options); if (options.length > 4) options = options.slice(0, 4); if (!options.includes(targetIp)) { options.pop(); options.push(targetIp); shuffleArray(options); } const explanation = generateSpecialAddressExplanationHTML(chosenSpecial.type); return { question, options, correctAnswer: targetIp, explanation }; } } else { targetIp = generateRandomIp(); const info = getIpInfo(targetIp); if (info.type === 'Loopback' || info.type === 'APIPA' || info.type === 'Broadcast Limitado') { return generateSpecialAddressQuestion(); } correctAnswer = info.type; const question = `La dirección IP <strong>${targetIp}</strong> es de tipo:`; let options = [correctAnswer]; let incorrectOptions = specialAddresses.map(s => s.description); shuffleArray(incorrectOptions); options.push(...incorrectOptions.slice(0, 3)); shuffleArray(options); if (options.length > 4) options = options.slice(0, 4); if (!options.includes(correctAnswer)) { options.pop(); options.push(correctAnswer); shuffleArray(options); } const explanation = generatePrivateRangeTableHTML(targetIp); return { question, options, correctAnswer, explanation }; } } catch (error) { console.error("Error en generateSpecialAddressQuestion:", error); return null; } }

/** Genera pregunta para identificar la porción de red de una IP */
function generateIdentifyNetworkPortionQuestion() { try { let ip, info, portions, attempts = 0; do { ip = generateRandomIp(); info = getIpInfo(ip); if (info.class === 'A' || info.class === 'B' || info.class === 'C') { portions = getIpPortions(ip, info.defaultMask); } else { portions = null; } attempts++; } while (!portions && attempts < 100); if (!portions) { ip = '192.168.10.50'; info = getIpInfo(ip); portions = getIpPortions(ip, info.defaultMask); if (!portions) throw new Error("Fallback IP falló"); } const question = `Dada la IP <strong>${ip}</strong> y su máscara por defecto (<strong>${info.defaultMask}</strong>), ¿cuál es la porción de red?`; const correctAnswer = portions.networkPortion || 'Ninguna'; let options = new Set([correctAnswer]); if (portions.hostPortion && portions.hostPortion !== correctAnswer) { options.add(portions.hostPortion); } let randomIpForPortion, randomInfoForPortion, incorrectNetworkPortion = null, portionAttempts = 0; do { randomIpForPortion = generateRandomIp(); randomInfoForPortion = getIpInfo(randomIpForPortion); if (randomInfoForPortion.defaultMask !== 'N/A') { incorrectNetworkPortion = getIpPortions(randomIpForPortion, randomInfoForPortion.defaultMask)?.networkPortion; } portionAttempts++; } while ((!incorrectNetworkPortion || incorrectNetworkPortion === correctAnswer) && portionAttempts < 50); if (incorrectNetworkPortion && incorrectNetworkPortion !== correctAnswer) { options.add(incorrectNetworkPortion); } let incorrectHostPortion = getIpPortions(randomIpForPortion, randomInfoForPortion.defaultMask)?.hostPortion; if (incorrectHostPortion && incorrectHostPortion !== correctAnswer && !options.has(incorrectHostPortion)) { options.add(incorrectHostPortion); } while (options.size < 4) { const randomClass = ['A', 'B', 'C'][getRandomInt(0, 2)]; let randomPortion = ''; if (randomClass === 'A') randomPortion = `${getRandomInt(1, 126)}`; else if (randomClass === 'B') randomPortion = `${getRandomInt(128, 191)}.${getRandomInt(0, 255)}`; else randomPortion = `${getRandomInt(192, 223)}.${getRandomInt(0, 255)}.${getRandomInt(0, 255)}`; if (randomPortion !== correctAnswer) { options.add(randomPortion); } } let optionsArray = Array.from(options); if (!optionsArray.includes(correctAnswer)) { optionsArray.pop(); optionsArray.push(correctAnswer); } optionsArray = optionsArray.slice(0, 4); shuffleArray(optionsArray); const explanation = generatePortionExplanationHTML(ip, info.defaultMask, info.class, correctAnswer, portions.hostPortion); return { question, options: optionsArray, correctAnswer, explanation }; } catch (error) { console.error("Error en generateIdentifyNetworkPortionQuestion:", error); return null; } }

/** Genera pregunta para identificar la porción de host de una IP */
function generateIdentifyHostPortionQuestion() { try { let ip, info, portions, attempts = 0; do { ip = generateRandomIp(); info = getIpInfo(ip); if (info.class === 'A' || info.class === 'B' || info.class === 'C') { portions = getIpPortions(ip, info.defaultMask); } else { portions = null; } attempts++; } while (!portions && attempts < 100); if (!portions) { ip = '172.25.200.15'; info = getIpInfo(ip); portions = getIpPortions(ip, info.defaultMask); if (!portions) throw new Error("Fallback IP falló"); } const question = `Dada la IP <strong>${ip}</strong> y su máscara por defecto (<strong>${info.defaultMask}</strong>), ¿cuál es la porción de host?`; const correctAnswer = portions.hostPortion || 'Ninguna'; let options = new Set([correctAnswer]); if (portions.networkPortion && portions.networkPortion !== correctAnswer) { options.add(portions.networkPortion); } let randomIpForPortion, randomInfoForPortion, incorrectHostPortion = null, portionAttempts = 0; do { randomIpForPortion = generateRandomIp(); randomInfoForPortion = getIpInfo(randomIpForPortion); if (randomInfoForPortion.defaultMask !== 'N/A') { incorrectHostPortion = getIpPortions(randomIpForPortion, randomInfoForPortion.defaultMask)?.hostPortion; } portionAttempts++; } while ((!incorrectHostPortion || incorrectHostPortion === correctAnswer) && portionAttempts < 50); if (incorrectHostPortion && incorrectHostPortion !== correctAnswer) { options.add(incorrectHostPortion); } let incorrectNetworkPortion = getIpPortions(randomIpForPortion, randomInfoForPortion.defaultMask)?.networkPortion; if (incorrectNetworkPortion && incorrectNetworkPortion !== correctAnswer && !options.has(incorrectNetworkPortion)) { options.add(incorrectNetworkPortion); } while (options.size < 4) { const randomClass = ['A', 'B', 'C'][getRandomInt(0, 2)]; let randomPortion = ''; if (randomClass === 'A') randomPortion = `${getRandomInt(0, 255)}.${getRandomInt(0, 255)}.${getRandomInt(1, 254)}`; else if (randomClass === 'B') randomPortion = `${getRandomInt(0, 255)}.${getRandomInt(1, 254)}`; else randomPortion = `${getRandomInt(1, 254)}`; if (randomPortion !== correctAnswer) { options.add(randomPortion); } } let optionsArray = Array.from(options); if (!optionsArray.includes(correctAnswer)) { optionsArray.pop(); optionsArray.push(correctAnswer); } optionsArray = optionsArray.slice(0, 4); shuffleArray(optionsArray); const explanation = generatePortionExplanationHTML(ip, info.defaultMask, info.class, portions.networkPortion, correctAnswer); return { question, options: optionsArray, correctAnswer, explanation }; } catch (error) { console.error("Error en generateIdentifyHostPortionQuestion:", error); return null; } }

/**
 * NUEVA FUNCIÓN: Genera pregunta para calcular la Dir. de Red o Broadcast (con máscara default).
 * @returns {object|null} Objeto de pregunta o null si hay error.
 */
function generateNetworkBroadcastAddressQuestion() {
    try {
        let ip, info, attempts = 0;
        // Genera IP válida (A, B, C, no Loopback)
        do {
            ip = generateRandomIp(); info = getIpInfo(ip); attempts++;
        } while ((info.class !== 'A' && info.class !== 'B' && info.class !== 'C' || info.type === 'Loopback') && attempts < 100);
        if (attempts >= 100) { ip = '172.18.120.30'; info = getIpInfo(ip); } // Fallback

        const mask = info.defaultMask;
        const networkAddr = calculateNetworkAddress(ip, mask);
        const broadcastAddr = calculateBroadcastAddress(ip, mask);

        if (!networkAddr || !broadcastAddr) { throw new Error("Error calculando direcciones de red/broadcast"); }

        // Decide aleatoriamente si preguntar por Red o Broadcast
        const askForNetwork = Math.random() < 0.5;
        const questionType = askForNetwork ? "Dirección de Red" : "Dirección de Broadcast";
        const correctAnswer = askForNetwork ? networkAddr : broadcastAddr;

        const question = `Dada la IP <strong>${ip}</strong> y su máscara por defecto (<strong>${mask}</strong>), ¿cuál es su <strong>${questionType}</strong>?`;

        let options = new Set([correctAnswer]);

        // Añadir opciones incorrectas:
        // 1. La otra dirección (si preguntó Red, añadir Broadcast y viceversa)
        const otherAddress = askForNetwork ? broadcastAddr : networkAddr;
        if (otherAddress !== correctAnswer) options.add(otherAddress);

        // 2. La IP original (si es diferente de la respuesta)
        if (ip !== correctAnswer && !options.has(ip)) options.add(ip);

        // 3. Dirección de red/broadcast de otra IP aleatoria
        let randomIp2, randomInfo2, randomNetAddr, randomBroadAddr, attempts2 = 0;
        do {
            randomIp2 = generateRandomIp(); randomInfo2 = getIpInfo(randomIp2); attempts2++;
        } while ((randomInfo2.class !== 'A' && randomInfo2.class !== 'B' && randomInfo2.class !== 'C' || randomInfo2.type === 'Loopback') && attempts2 < 50);
        if (randomInfo2.defaultMask !== 'N/A') {
            randomNetAddr = calculateNetworkAddress(randomIp2, randomInfo2.defaultMask);
            randomBroadAddr = calculateBroadcastAddress(randomIp2, randomInfo2.defaultMask);
            if (randomNetAddr && randomNetAddr !== correctAnswer && !options.has(randomNetAddr)) options.add(randomNetAddr);
            if (randomBroadAddr && randomBroadAddr !== correctAnswer && !options.has(randomBroadAddr)) options.add(randomBroadAddr);
        }

        // Rellenar hasta 4 opciones con IPs aleatorias (que no sean la respuesta)
        while (options.size < 4) {
            let randomOptionIp = generateRandomIp();
            if (randomOptionIp !== correctAnswer && !options.has(randomOptionIp)) {
                options.add(randomOptionIp);
            }
        }

        let optionsArray = Array.from(options);
        if (!optionsArray.includes(correctAnswer)) { optionsArray.pop(); optionsArray.push(correctAnswer); }
        optionsArray = optionsArray.slice(0, 4);
        shuffleArray(optionsArray);

        // Explicación visual y textual
        const portions = getIpPortions(ip, mask); // Reutilizar para la explicación visual
        let explanation = generatePortionExplanationHTML(ip, mask, info.class, portions?.networkPortion, portions?.hostPortion);
        explanation += `<p style="font-size:0.9em; text-align:center; margin-top:5px;">Dirección de Red = IP AND Máscara = <strong>${networkAddr}</strong><br>Dirección de Broadcast = IP OR (NOT Máscara) = <strong>${broadcastAddr}</strong></p>`;

        return { question, options: optionsArray, correctAnswer, explanation };

    } catch (error) {
        console.error("Error en generateNetworkBroadcastAddressQuestion:", error);
        return null;
    }
}


// --- Agrupar Generadores por Nivel ---

const entryQuestionGenerators = [
    generateClassQuestion, generateTypeQuestion, generateDefaultMaskQuestion,
    generateSelectClassQuestion, generateSelectPrivateIpQuestion, generateSelectIpByDefaultMaskQuestion
];

// Array para generadores de nivel Associate
const associateQuestionGenerators = [
    generateClassAndTypeQuestion,
    generateClassAndDefaultMaskQuestion,
    generateClassAndNetworkPortionQuestion,
    generateClassAndHostPortionQuestion,
    generateRfc1918Question,
    generateSpecialAddressQuestion,
    generateIdentifyNetworkPortionQuestion,
    generateIdentifyHostPortionQuestion,
    generateNetworkBroadcastAddressQuestion // <-- Nueva función añadida
];

// TODO: Crear professionalQuestionGenerators = [...]

// --- Función Principal para Obtener Pregunta ---

export function getNextQuestion(level) {
     let generators = [];
     if (level === 'Entry') { generators = entryQuestionGenerators; }
     else if (level === 'Associate') { generators = associateQuestionGenerators; }
     else if (level === 'Professional') { console.warn("Generadores de nivel Professional aún no implementados."); return null; }
     else { console.error("Nivel desconocido solicitado:", level); return null; }

     if (!generators || generators.length === 0) { console.warn(`No hay generadores de preguntas definidos para el nivel: ${level}`); return null; }

     const randomIndex = getRandomInt(0, generators.length - 1);
     const generatorFunction = generators[randomIndex];

     if (generatorFunction && typeof generatorFunction === 'function') {
         try {
             const questionData = generatorFunction();
             if (questionData && questionData.question && Array.isArray(questionData.options) && questionData.options.length > 0 && questionData.correctAnswer && questionData.explanation !== undefined) {
                 return questionData;
             } else {
                 console.error(`El generador ${generatorFunction.name} devolvió datos inválidos o incompletos.`, questionData);
                 return null;
             }
         } catch (error) { console.error(`Error al ejecutar el generador ${generatorFunction.name}:`, error); return null; }
     } else { console.error(`El generador seleccionado para el nivel ${level} en el índice ${randomIndex} no es una función válida.`); return null; }
}
